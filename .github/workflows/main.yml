name: Deploy to Cloudflare Pages

on:
  workflow_dispatch:

permissions:
  contents: read
  deployments: write

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ''

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.12.0'
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linter
        run: pnpm lint

  unit-test:
    name: Unit Tests
    needs: lint
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ''

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.12.0'
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm test

  build-and-deploy:
    name: Build and Deploy
    needs: [lint, unit-test]
    runs-on: ubuntu-latest
    env:
      STORE_PATH: ''

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '9.12.0'
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: ${{ secrets.CLOUDFLARE_PROJECT_NAME || 'ai-flashcards' }}
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  deployment-status:
    name: Deployment Status
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: ${{ always() && !cancelled() }}

    steps:
      - uses: actions/checkout@v4

      - name: Create Deployment Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployStatus = "${{ needs.build-and-deploy.result }}" === "success" ? "✅" : "❌";
            const lintStatus = "${{ needs.lint.result }}" === "success" ? "✅" : "❌";
            const testStatus = "${{ needs.unit-test.result }}" === "success" ? "✅" : "❌";
            const allPassed = deployStatus === "✅" && lintStatus === "✅" && testStatus === "✅";

            const body = `## Deployment Status Summary

            | Check | Status |
            | ----- | ------ |
            | Lint | ${lintStatus} |
            | Unit Tests | ${testStatus} |
            | Deployment | ${deployStatus} |

            ${allPassed ? '✨ Successfully deployed to Cloudflare Pages!' : '❗ There were issues during deployment.'}

            ${deployStatus === "✅" ? `[View the live site](https://${process.env.CLOUDFLARE_PROJECT_NAME || 'ai-flashcards'}.pages.dev)` : ''}
            `;

            console.log(body);
